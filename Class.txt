1. All classes have a function called?

A. __init__
B. __init__()
C. init
D. init()

Ans B

2. What will be output for the folllowing code?

 class test:
     def __init__(self,a):
         self.a=a
 
     def display(self):
         print(self.a)
obj=test()
obj.display()
A. Runs normally, doesn’t display anything
B. Displays 0, which is the automatic default value
C. Error as one argument is required while creating the object
D. Error as display function requires additional argument
Ans C

3.Guess the output
class A: 
A = 1 
def __init__(self): 
self.a = 0
 print(hasattr(A, 'a'))

A)0
B) True
C) 1 
D)False

Ans D

4.Predict the output

class A: 
def __init__(self, v=2):
 def set(self, v=1): 
	self.v +=v 
	return self.v 
a = A() 
b = a 
b.set() 
print(a.v)

A)1 
B)0
C)2 
D)3

Ans D

5. What is the expected effect of running the following code?

class A: 
	def __init__(self, v): 
	self.__a = v + 1 
a = A(0) 
print(a.__a)

A)The code will raise an AttributeError except 
B)The code will print 2 
C)The code will print 0 
D)The code will print 1

Ans A


6.What is the expected result of executing the following code?

class A: 
	pass 
class B(A): 
	pass 
class C(B):
	 pass 
print(issubclass(A, C))

A)The code will print Ture 
B)The code will print 1 
C)The code will print False
D) The code will raise an exception

7.If the class constructor is declared in the following way:

class Class: 
	def __init__(self, vla = 0):
		 pass

which one of the assignments is invalid? 
A)object = Class(1) 
B)object = Class(None) 
C)object = Class(1, 2) 
D)object = Class()

ANS C

8.What is the expected result of executing the followinf code? 
class A:
	 def __init__(self):
		 pass 
a = A(1) 
rint(hasattr(a, 'A')) 
A)The code will print 1 
B)The code will raise an exception 
C)The code will print False 
D)The code will print True

ANS B


9.A predefined Python variable that stores the current module name is called:
A) __name__
B)__mod__ 
C)__modname__ 
D)__module__

Ans A

10.If the class’s constructor is declared as below, which one of  the assignments is valid? 
class Class: 
	def __init__(self): 
		pass

A)object = Class 
B)object = Class() 
C)object = Class(self) 
D)object = Class(object)

Ans B


11.If there is a superclass named A and a subclass named B, which one of the presented invocations should you put instead of the comment? 
class A: 
	def __init__(self): 
		self.a = 1 
class B(A): 
	def __init__(self): 
	# put selected line here.
		 self.b = 2

A)A.__init__(self)
B) __init__() 
C)A.__init__()
 D)A.__init__(1)

Ans A

12.How many objects and reference variables are there for the given Python code?

class A:
print("Inside class")
A()
A()
obj=A()
A. 2 and 1
B. 3 and 3
C. 3 and 1
D. 3 and 2

Ans :-  C

13.4. _____ is used to create an object.
A. class
B. constructor
C. In-built functions
D. user-defined functions

Ans B

14.What will be the output of the following Python code?

class test:
def __init__(self,a=""Hello World""):
self.a=a
def display(self):
print(self.a)
obj=test()
obj.display()

A. Nothing is displayed
B. “Hello World” is displayed
C. The program has an error display function doesn’t have parameters
D. The program has an error because constructor can’t have default arguments

Ans B

15.Which of the following is False with respect Python code?

class Student:
def __init__(self,id,age):
self.id=id
self.age=age
std=Student(1,20)
A. Every class must have a constructor.
B. id and age are called the parameters.
C. "std" is the reference variable for object Student(1,20)
D. None of the above

Ans A

16.Which of the following is correct?

class A:
def __init__(self,name):
self.name=name
a1=A("john")
a2=A("john")
A. id(a1) and id(a2) will have same value.
B. id(a1) and id(a2) will have different values.
C. Two objects with same value of attribute cannot be created.
D. None of the above

Ans C

17.What is Instantiation in terms of OOP terminology?
A. Creating an instance of class
B. Copying an instance of class
C. Deleting an instance of class
D. Modifying an instance of class

Ans A

18._____ is used to create an object.
(a)	class
(b)	constructor
(c)	user-defined functions
(d)	In-built functions

Ans B

19.	
What is setattr() used for?
(a)	To access the attribute of the object
(b)	To set an attribute
(c)	To check if an attribute exists or not
(d)	To delete an attribute

Ans B

20.What will be the output of the following Python code?
class fruits:
    def __init__(self, price):
        self.price = price
obj=fruits(50)
 
obj.quantity=10
obj.bags=2
 
print(obj.quantity+len(obj.__dict__))
(a)	12
(b)	52
(c)	13
(d)	60

Ans C

21.Which of the following Python code creates an empty class?
(a)	
class A:
    return
(b)	
class A:
    pass
(c)	
class A:
(d)	It is not possible to create an empty class
Ans B

22.Which of the following does not correctly create an object instance?

A. puppy = Dog("Jamie")
B. dog = Dog("Jamie")
C. jamie = Dog()
D. pupper = new Dog("Jamie")

Ans D

23.What does the following code output?

class People():

    def __init__(self, name):
      self.name = name

    def namePrint(self):
      print(self.name)

  person1 = People("Sally")
  person2 = People("Louise")
  person1.namePrint()

A. Sally
B. Louise
C. Sally Louise
D. person1

Ans A

24.Which of the following statements is not true about object-oriented programming?

A. One of the benefits of object-oriented programming is that it can hide complexity.
B. A class contains functions as well as the data that is used by those functions.
C. Constructor methods are required to initialize an object and destructor methods are required to destroy the object when no longer required.
D. A powerful feature of object-oriented programming is the ability to create a new class by extending an existing class

Ans C

25.Which of the following is the correct way to define an initializer method?

A. def __init__(title, author):
B. def __init__(self, title, author):
C. def __init__():
D. __init__(self, title, author
Ans B